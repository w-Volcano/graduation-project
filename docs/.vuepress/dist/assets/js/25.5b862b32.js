(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{379:function(t,a,s){"use strict";s.r(a);var n=s(42),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"c-中的变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-中的变量"}},[t._v("#")]),t._v(" C++中的变量")]),t._v(" "),s("p",[t._v("​\t变量是一个名称，它与一个可以改变的值相关联。例如当我写下"),s("code",[t._v("int num=20;")]),t._v("时，这里的变量名是num，它与值20相关联，int是一种数据类型，表示这个变量可以容纳整数值。我们将在下一篇教程中介绍数据类型。在本教程中，我们将讨论关于变量的问题。")]),t._v(" "),s("h2",{attrs:{id:"在c-中声明一个变量的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在c-中声明一个变量的语法"}},[t._v("#")]),t._v(" 在C++中声明一个变量的语法")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("data_type variable1_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" variable2_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("例如：")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​\t我们也可以这样写：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"变量类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[t._v("#")]),t._v(" 变量类型")]),t._v(" "),s("p",[t._v("​\t变量可以根据其数据类型进行分类。例如，在上面的例子中，我们已经看到了整数类型的变量。以下是C++中可用的变量类型：")]),t._v(" "),s("p",[s("strong",[t._v("int")]),t._v(" : 这些类型的变量持有整数值。")]),t._v(" "),s("p",[s("strong",[t._v("char")]),t._v(" : 存储字符值，如'c'、'F'、'B'、'p'、'q'等。")]),t._v(" "),s("p",[s("strong",[t._v("bool")]),t._v(" : 存储布尔值true或false。")]),t._v(" "),s("p",[s("strong",[t._v("double")]),t._v(" : 双精度浮点数值")]),t._v(" "),s("p",[s("strong",[t._v("float")]),t._v(" : 单精度浮点数值")]),t._v(" "),s("h2",{attrs:{id:"基于其范围的变量类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于其范围的变量类型"}},[t._v("#")]),t._v(" 基于其范围的变量类型")]),t._v(" "),s("p",[t._v("​\t在进一步讨论之前，我们先来讨论一下什么是范围。当我们讨论[Hello World程序](/contents/第一个C++程序 - Hello World.html)时，我们看到程序中的大括号是这样的：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" main "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一些代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\t如果你在main()函数中声明了一个变量，并试图在main()函数之外使用该变量，那么你将得到编译错误。")]),t._v(" "),s("p",[t._v("​\t现在我们已经了解了什么是作用域。让我们继续了解基于作用域的变量类型。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("全局变量")])]),t._v(" "),s("li",[s("p",[t._v("局部变量")])])]),t._v(" "),s("h3",{attrs:{id:"全局变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[t._v("#")]),t._v(" 全局变量")]),t._v(" "),s("p",[t._v("​\t在任何函数（也包括main）之外声明的变量称为全局变量。全局变量在整个程序中都有自己的范围，它们可以在程序的任何地方被访问，在main中，在用户定义的函数中，任何地方。")]),t._v(" "),s("p",[t._v("​\t让我们举个例子来理解一下。")]),t._v(" "),s("h4",{attrs:{id:"全局变量示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局变量示例"}},[t._v("#")]),t._v(" 全局变量示例")]),t._v(" "),s("p",[t._v("​\t这里我们有一个全局变量"),s("code",[t._v("myVar")]),t._v("，它是在main之外声明的。我们在main()函数中访问了该变量两次，没有出现任何问题。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个全局变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" myVar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of myVar: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of myVar: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myVar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Value of myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" A\nValue of myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Z\n")])])]),s("h3",{attrs:{id:"局部变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部变量"}},[t._v("#")]),t._v(" 局部变量")]),t._v(" "),s("p",[t._v("​\t局部变量在任何用户定义的函数、主函数、循环或任何控制语句(if, if-else等)的括号内声明，并在这些括号内限制其范围。")]),t._v(" "),s("h4",{attrs:{id:"局部变量示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部变量示例"}},[t._v("#")]),t._v(" 局部变量示例")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFuncn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个局部变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" myVar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of myVar: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of myVar: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myVar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")]),t._v("\n编译时出错，因为我们试图在变量"),s("code",[t._v("myVar")]),t._v("的范围外访问它，"),s("code",[t._v("myVar")]),t._v("的范围仅限于那些括号内的函数"),s("code",[t._v("myFuncn()")]),t._v("主体。"),s("code",[t._v("myVar")]),t._v("的作用域仅限于这些括号内的函数"),s("code",[t._v("myFuncn()")]),t._v("的主体。")]),t._v(" "),s("h2",{attrs:{id:"在c-中-全局变量和局部变量可以同名吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在c-中-全局变量和局部变量可以同名吗"}},[t._v("#")]),t._v(" 在C++中，全局变量和局部变量可以同名吗？")]),t._v(" "),s("p",[t._v("​\t让我们看看一个具有相同名称的全局和局部变量的例子。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个全局变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" myVar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFuncn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个局部变量")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" myVar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" myVar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Funcn call: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFuncn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of myVar: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Funcn call: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFuncn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of myVar: "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Funcn call"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" B\nValue of myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" A\nFuncn call"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" B\nValue of myVar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Z\n")])])]),s("p",[t._v("​\t你可以看到，当我在主函数中改变"),s("code",[t._v("myVar")]),t._v("的值时，它只改变了全局变量"),s("code",[t._v("myVar")]),t._v("的值，因为局部变量"),s("code",[t._v("myVar")]),t._v("的范围仅限于函数"),s("code",[t._v("myFuncn()")]),t._v("。")])])}),[],!1,null,null,null);a.default=r.exports}}]);