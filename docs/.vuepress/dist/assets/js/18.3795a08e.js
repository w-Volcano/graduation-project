(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{366:function(s,t,a){s.exports=a.p+"assets/img/switch_case_flow_diagram.1bc44ccc.jpg"},393:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"在c-中的switch-case语句与示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在c-中的switch-case语句与示例"}},[s._v("#")]),s._v(" 在C++中的switch case语句与示例")]),s._v(" "),e("p",[s._v("​\tswitch case语句用于当我们有多个条件，并且我们需要根据条件执行不同的操作时。当我们有多个条件，并且当某一条件被满足时，我们需要执行一组语句。在这种情况下，我们可以使用冗长的"),e("RouterLink",{attrs:{to:"/contents/C++中的if-else语句.html"}},[s._v("if...else-if语句")]),s._v("或者切换case。冗长的if...else-if的问题是，当我们有几个条件时，它变得很复杂。switch case是处理这种情况的一种干净而有效的方法。")],1),s._v(" "),e("p",[e("strong",[s._v("switch case语句")]),s._v("的语法:")]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("variable "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" an integer expression"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" constant"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//C++ 代码")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" constant"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//C++ 代码")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//C++ 代码")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[s._v("​\tswitch case 语句大多与break语句一起使用，尽管break语句是可选的。我们将首先看到一个没有break语句的例子，然后我们将讨论带有break语句的switch case。")]),s._v(" "),e("h2",{attrs:{id:"switch-case的示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#switch-case的示例"}},[s._v("#")]),s._v(" switch case的示例")]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")])])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case1: Value is: "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("num"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case2: Value is: "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("num"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case3: Value is: "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("num"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Default: Value is: "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("num"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[e("strong",[s._v("输出：")])]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[s._v("Default"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Value is"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])])]),e("p",[e("strong",[s._v("解释")]),s._v(" 。在switch中，我给出了一个表达式，你也可以给出变量。我给出了表达式num+2，其中num的值是5，加法后表达式的结果是7，由于没有定义值为4的情况，所以执行了默认情况。")]),s._v(" "),e("h2",{attrs:{id:"switch-case流程图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#switch-case流程图"}},[s._v("#")]),s._v(" switch case流程图")]),s._v(" "),e("p",[s._v("​\t它评估表达式或变量的值（基于switch括号内给出的任何内容），然后根据结果执行相应的情况。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(366),alt:"switch case flow diagram"}})]),s._v(" "),e("h2",{attrs:{id:"switch-case中的break语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#switch-case中的break语句"}},[s._v("#")]),s._v(" switch case中的break语句")]),s._v(" "),e("p",[s._v("​\t在讨论break语句之前，我们先来看看在switch case中不使用break语句会发生什么。请看下面的例子：")]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")])])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case1 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case2 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case3 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case4 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Default "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[e("strong",[s._v("输出：")])]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[s._v("Case2 \nCase3 \nCase4 \nDefault \n")])])]),e("p",[s._v("​\t在上面的程序中，我们在switch括号内有变量i，这意味着无论变量i的值是多少，相应的case块都会被执行。我们把整数值2传给了switch，所以控制切换到了case 2，但是我们在case 2之后没有break语句，导致流向后续的case，直到结束。然而这并不是我们想要的，我们希望执行正确的case块，而忽略其余的块。解决这个问题的方法是在每个case块之后使用break语句。")]),s._v(" "),e("p",[s._v("​\t当你希望你的程序流从switch体中出来时，就会用到break语句。每当在switch主体中遇到break语句时，执行流会直接从switch中出来，而忽略其余的case。这就是为什么你必须用break语句结束每个case块的原因。")]),s._v(" "),e("p",[s._v("​\t让我们举个同样的例子，但这次是用break语句。")]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")])])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case1 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case2 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case3 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case4 "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Default "')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[e("strong",[s._v("输出：")])]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[s._v("Case2\n")])])]),e("p",[s._v("现在你可以看到只有case2被执行了，其余的case都被忽略了。")]),s._v(" "),e("p",[e("strong",[s._v("为什么我在default后没有使用break语句？")]),s._v("\n控件在default后自己会从switch中出来，所以我没有在后面使用break语句，不过如果你愿意你可以使用，这样做没有坏处。")]),s._v(" "),e("h2",{attrs:{id:"重要注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重要注意事项"}},[s._v("#")]),s._v(" 重要注意事项")]),s._v(" "),e("p",[s._v("​\t1）case不一定要有1、2、3等顺序。它可以在case关键字后有任何整数值。另外，case不需要总是按升序排列，你可以根据需求指定它们的任何顺序。")]),s._v(" "),e("p",[s._v("​\t2）你也可以使用切换大小写的字符，例如——。")]),s._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")])])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" ch"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'d'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case1 "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case2 "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case3 "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'y'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Case4 "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cout"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Default "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[s._v("​\t3）允许switch语句的嵌套，这意味着你可以在另一个switch里面有switch语句。但是应该避免嵌套switch语句，因为它使程序变得更复杂，可读性更低。")])])}),[],!1,null,null,null);t.default=n.exports}}]);