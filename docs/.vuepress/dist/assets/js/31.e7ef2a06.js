(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{398:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"c-中的析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中的析构函数"}},[t._v("#")]),t._v(" C++中的析构函数")]),t._v(" "),a("p",[t._v("析构函数是一个特殊的成员函数，它的工作原理与构造函数刚好相反，与"),a("RouterLink",{attrs:{to:"/contents/C++中的构造函数.html"}},[t._v("构造函数")]),t._v("用于初始化对象不同的是，析构函数会破坏（或删除）对象。")],1),t._v(" "),a("p",[a("strong",[t._v("析构函数的语法")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一些代码   ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("​\t与构造函数类似，析构函数的名称应该与类名完全匹配。如上图所示，析构函数声明应该总是以波形号(~)符号开头。")]),t._v(" "),a("h2",{attrs:{id:"什么时候会调用析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候会调用析构函数"}},[t._v("#")]),t._v(" 什么时候会调用析构函数？")]),t._v(" "),a("p",[t._v("当以下情况时，会"),a("strong",[t._v("自动调用")]),t._v("的析构器。")]),t._v(" "),a("p",[t._v("1）程序执行完毕。")]),t._v(" "),a("p",[t._v("2）当包含"),a("RouterLink",{attrs:{to:"/contents/C++中的变量.html"}},[t._v("局部变量")]),t._v("的作用域（{ }括号）结束时。")],1),t._v(" "),a("p",[t._v("3）当你调用删除操作符时。")]),t._v(" "),a("h2",{attrs:{id:"析构函数示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#析构函数示例"}},[t._v("#")]),t._v(" 析构函数示例")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWorld")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HelloWorld")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Constructor is called"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//析构函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HelloWorld")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Destructor is called"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//成员函数")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     cout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建对象")]),t._v("\n   HelloWorld obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//成员函数调用")]),t._v("\n   obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("输出：")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Constructor is called\nHello World"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nDestructor is called\n")])])]),a("h2",{attrs:{id:"析构函数规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#析构函数规则"}},[t._v("#")]),t._v(" 析构函数规则")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("名称应以小写字母(~)开头，且必须与类名一致。")])]),t._v(" "),a("li",[a("p",[t._v("一个类中不能有一个以上的析构函数。")])]),t._v(" "),a("li",[a("p",[t._v("与构造函数可以有参数不同，析构函数不允许有任何参数。")])])]),t._v(" "),a("p",[t._v("4）和构造函数一样，它们没有任何返回类型。")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("当你在类中没有指定任何析构函数时，编译器会生成一个默认的析构函数并将其插入到你的代码中。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);