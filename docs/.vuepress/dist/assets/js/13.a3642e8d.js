(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{367:function(t,s,a){t.exports=a.p+"assets/img/Cpp_operator_types.0d947679.jpg"},413:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"c-中的运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-中的运算符"}},[t._v("#")]),t._v(" C++中的运算符")]),t._v(" "),n("p",[t._v("​\t操作符代表一个动作。例如，+是一个表示加法的运算符。一个运算符在两个或多个操作数上工作，并产生一个输出。例如3+4+5这里的+运算符在三个操作数上工作，并产生12的输出。")]),t._v(" "),n("h2",{attrs:{id:"c-中的运算符类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-中的运算符类型"}},[t._v("#")]),t._v(" C++中的运算符类型")]),t._v(" "),n("p",[n("img",{attrs:{src:a(367),alt:"C++ Operator Types"}})]),t._v(" "),n("p",[t._v("​\t1）基本算术运算符")]),t._v(" "),n("p",[t._v("​\t2）赋值运算符")]),t._v(" "),n("p",[t._v("​\t3）自增和自减运算符")]),t._v(" "),n("p",[t._v("​\t4）逻辑运算符")]),t._v(" "),n("p",[t._v("​\t5）比较（关系型）运算符")]),t._v(" "),n("p",[t._v("​\t6）位操作符")]),t._v(" "),n("p",[t._v("​\t7）三元运算符")]),t._v(" "),n("h2",{attrs:{id:"_1-基本算术运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本算术运算符"}},[t._v("#")]),t._v(" 1）基本算术运算符")]),t._v(" "),n("p",[t._v("基本的算术运算符有 +, -, *, /, %")]),t._v(" "),n("p",[n("code",[t._v("+")]),t._v(" 代表加法。")]),t._v(" "),n("p",[n("code",[t._v("-")]),t._v(" 是减法。")]),t._v(" "),n("p",[n("code",[t._v("*")]),t._v(" 代表乘法。")]),t._v(" "),n("p",[n("code",[t._v("/")]),t._v(" 是除法。")]),t._v(" "),n("p",[n("code",[t._v("%")]),t._v(" 表示模数。")]),t._v(" "),n("p",[n("strong",[t._v("注：")]),t._v(" 模运算符返回余数，例如20 % 5将返回0。")]),t._v(" "),n("h3",{attrs:{id:"算术运算符实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符实例"}},[t._v("#")]),t._v(" 算术运算符实例")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 + num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 - num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 * num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 / num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 % num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("输出：")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("280")]),t._v("\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9600")]),t._v("\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),n("h2",{attrs:{id:"_2-赋值运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-赋值运算符"}},[t._v("#")]),t._v(" 2）赋值运算符")]),t._v(" "),n("p",[t._v("C++中的赋值运算符有：=、+=、-=、*=、/=、%=。")]),t._v(" "),n("p",[n("strong",[t._v("num2=num1")]),t._v("会将变量num1的值赋给变量。")]),t._v(" "),n("p",[n("strong",[t._v("num2+=num1")]),t._v("等于num2=num2+num1。")]),t._v(" "),n("p",[n("strong",[t._v("num2-=num1")]),t._v("等于num2=num2-num1。")]),t._v(" "),n("p",[n("em",[n("em",[t._v("num2")]),t._v("=num1")]),t._v("*等于num2=num2*num1。")]),t._v(" "),n("p",[n("strong",[t._v("num2/=num1")]),t._v("等于num2=num2/num1。")]),t._v(" "),n("p",[n("strong",[t._v("num2%=num1")]),t._v("等于num2=num2%num1。")]),t._v(" "),n("h3",{attrs:{id:"赋值运算符示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符示例"}},[t._v("#")]),t._v(" 赋值运算符示例")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"= Output: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"+= Output: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-= Output: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      \n cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*= Output: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v(" num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      \n cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/= Output: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%=")]),t._v(" num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      \n cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%= Output: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("输出：")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" Output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("480")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" Output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" Output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("57600")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v(" Output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%=")]),t._v(" Output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),n("h2",{attrs:{id:"_3-自增和自减运算符示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-自增和自减运算符示例"}},[t._v("#")]),t._v(" 3）自增和自减运算符示例")]),t._v(" "),n("p",[t._v("​\t++和--")]),t._v(" "),n("p",[t._v("​\tnum++相当于num=num+1。")]),t._v(" "),n("p",[t._v("​\tnum--相当于num=num-1。")]),t._v(" "),n("h3",{attrs:{id:"自增和自减运算符实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自增和自减运算符实例"}},[t._v("#")]),t._v(" 自增和自减运算符实例")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  num1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1++ is: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num2-- is: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("输出：")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("num1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" is"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("241")]),t._v("\nnum2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" is"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v("\n")])])]),n("h2",{attrs:{id:"_4-逻辑运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-逻辑运算符"}},[t._v("#")]),t._v(" 4）逻辑运算符")]),t._v(" "),n("p",[t._v("逻辑运算符是与二元变量一起使用的，它们主要用于条件语句和循环，以评估条件。它们主要用在条件语句和循环中，用于评估一个条件。")]),t._v(" "),n("p",[t._v("C++中的逻辑运算符有: &&, ||, !")]),t._v(" "),n("p",[t._v("假设我们有两个布尔变量b1和b2。")]),t._v(" "),n("p",[n("strong",[t._v("b1&&b2")]),t._v(" 如果b1和b2都为真，将返回true，否则将返回false。")]),t._v(" "),n("p",[n("strong",[t._v("b1||b2")]),t._v(" 如果b1和b2都是false，将返回false，否则将返回true。")]),t._v(" "),n("p",[n("strong",[t._v("!b1")]),t._v(" 会返回b1的相反值，也就是说，如果b1为假，它将为真，如果b1为真，它将返回假。")]),t._v(" "),n("h3",{attrs:{id:"逻辑运算符实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符实例"}},[t._v("#")]),t._v(" 逻辑运算符实例")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" b1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" b2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b1 &amp;&amp; b2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("b2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b1 || b2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("b2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!(b1 &amp;&amp; b2): "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("b2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("输出：")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("b1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" b2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nb1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" b2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" b2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),n("h2",{attrs:{id:"_5-关系运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-关系运算符"}},[t._v("#")]),t._v(" 5）关系运算符")]),t._v(" "),n("p",[t._v("在C++中，我们有六个关系运算符: ==, !=, >, <, >=, <=")]),t._v(" "),n("p",[n("strong",[t._v("==")]),t._v(" 如果左边和右边都相等，返回true。")]),t._v(" "),n("p",[n("strong",[t._v("!=")]),t._v(" 如果左侧不等于右侧，返回true。")]),t._v(" "),n("p",[n("strong",[t._v(">")]),t._v(" 如果左侧大于右侧，返回true。")]),t._v(" "),n("p",[n("strong",[t._v("<")]),t._v(" 如果左侧小于右侧，返回true。")]),t._v(" "),n("p",[n("strong",[t._v(">=")]),t._v(" 如果左侧大于或等于右侧，返回true。")]),t._v(" "),n("p",[n("strong",[t._v("<=")]),t._v(" 如果左侧小于或等于右侧，返回true。")]),t._v(" "),n("h3",{attrs:{id:"关系运算符的例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符的例子"}},[t._v("#")]),t._v(" 关系运算符的例子")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 and num2 are equal"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 and num2 are not equal"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 and num2 are not equal"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 and num2 are equal"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is greater than num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is not greater than num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is greater than or equal to num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is less than num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is less than num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is not less than num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is less than or equal to num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 is greater than num2"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("输出：")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" num2 are "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" equal\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" num2 are "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" equal\nnum1 is greater than num2\nnum1 is greater than "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" equal to num2\nnum1 is "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" less than num2\nnum1 is greater than num2\n")])])]),n("h2",{attrs:{id:"_6-位运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-位运算符"}},[t._v("#")]),t._v(" 6）位运算符")]),t._v(" "),n("p",[t._v("有六个位操作符：&, |, ^, ~, <<, >>")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* equal to 00001011*/")]),t._v("\nnum2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* equal to 00010110 */")]),t._v("\n")])])]),n("p",[t._v("​\t位运算符执行逐位处理。")]),t._v(" "),n("p",[n("strong",[t._v("num1 & num2")]),t._v(" 比较num1和num2的对应位，如果两个位都相等，则生成1，否则返回0。在我们的例子中，它会返回：2，即000010，因为在num1和num2的二进制形式中，只有第二个最后位是匹配的。")]),t._v(" "),n("p",[n("strong",[t._v("num1 | num2")]),t._v(" 比较num1和num2的对应位，如果其中一个位是1，则生成1，否则返回0。 在我们的例子中，它将返回31，即00011111。")]),t._v(" "),n("p",[n("strong",[t._v("num1 ^ num2")]),t._v(" 比较num1和num2的对应位，如果不相等则生成1，否则返回0。 在我们的例子中，它将返回29，相当于00011101。")]),t._v(" "),n("p",[n("strong",[t._v("~num1")]),t._v(" 是一个补码运算符，它只是将位从0变为1，将1变为0。在我们的例子中，它将返回-12，相当于11110100的8位有符号的操作符。")]),t._v(" "),n("p",[n("strong",[t._v("num1 << 2")]),t._v(" 左移运算符，它将位子向左移动，丢弃最左边的位子，并将最右边的位子赋值为0，在我们的例子中，输出是44，这相当于00101100")]),t._v(" "),n("p",[t._v("注意：在下面的例子中，我们在这个移位运算符的右侧提供了2，这就是比特向左侧移动两个位置的原因。我们可以改变这个数字，位将被移动的位数指定在右侧的操作符。同样的道理也适用于右边的运算符。")]),t._v(" "),n("p",[n("strong",[t._v("num1 >> 2")]),t._v(" 右移运算符，它将位子向右移动，丢弃最右边的位子，并将最左边的位子赋值为 0。")]),t._v(" "),n("h3",{attrs:{id:"位运算符实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位运算符实例"}},[t._v("#")]),t._v(" 位运算符实例")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 11 = 00001011 */")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 22 = 00010110 */")]),t._v(" \n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 &amp; num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 | num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 ^ num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~num1: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 << 2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1 >> 2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("输出：")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v("\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\nnum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),n("h2",{attrs:{id:"_7-三元运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-三元运算符"}},[t._v("#")]),t._v(" 7）三元运算符")]),t._v(" "),n("p",[t._v("这个运算符判断一个布尔表达式，并根据结果赋值。")]),t._v(" "),n("p",[t._v("语法:")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("variable num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),n("p",[t._v("如果表达式的结果为真，那么冒号(:)前的第一个值被分配给变量num1，否则第二个值被分配给num1。")]),t._v(" "),n("h3",{attrs:{id:"三元运算符实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符实例"}},[t._v("#")]),t._v(" 三元运算符实例")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* num1 is not equal to 10 that's why\n   * the second value after colon is assigned\n   * to the variable num2\n   */")]),t._v("\n  num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* num1 is equal to 99 that's why\n   * the first value is assigned\n   * to the variable num2\n   */")]),t._v("\n  num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num2: "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("num2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("输出：")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\nnum2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n")])])]),n("h2",{attrs:{id:"其他操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他操作符"}},[t._v("#")]),t._v(" 其他操作符")]),t._v(" "),n("p",[t._v("​\t在C++中还有其他一些运算符，如"),n("strong",[t._v("逗号运算符")]),t._v("和"),n("strong",[t._v("sizeof运算符")]),t._v("。我们将在另一个教程中详细介绍它们。")]),t._v(" "),n("h2",{attrs:{id:"c-中的运算符优先性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-中的运算符优先性"}},[t._v("#")]),t._v(" C++中的运算符优先性")]),t._v(" "),n("p",[t._v("​\t如果表达式有多个运算符，这将确定首先需要计算哪个运算符。具有较高优先级和较低优先级的运算符。")]),t._v(" "),n("p",[n("strong",[t._v("一元运算符")])]),t._v(" "),n("p",[n("code",[t._v("++ – – ! ~")])]),t._v(" "),n("p",[n("strong",[t._v("乘法式")])]),t._v(" "),n("p",[n("code",[t._v("* / %")])]),t._v(" "),n("p",[n("strong",[t._v("加法式")])]),t._v(" "),n("p",[n("code",[t._v("+ –")])]),t._v(" "),n("p",[n("strong",[t._v("移位")])]),t._v(" "),n("p",[n("code",[t._v("<< >> >>>")])]),t._v(" "),n("p",[n("strong",[t._v("关系")])]),t._v(" "),n("p",[n("code",[t._v("> >= < <=")])]),t._v(" "),n("p",[n("strong",[t._v("相等性")])]),t._v(" "),n("p",[n("code",[t._v("== !=")])]),t._v(" "),n("p",[n("strong",[t._v("按位与")])]),t._v(" "),n("p",[n("code",[t._v("&")])]),t._v(" "),n("p",[n("strong",[t._v("按位异或")])]),t._v(" "),n("p",[n("code",[t._v("^")])]),t._v(" "),n("p",[n("strong",[t._v("按位或")])]),t._v(" "),n("p",[n("code",[t._v("|")])]),t._v(" "),n("p",[n("strong",[t._v("逻辑与")])]),t._v(" "),n("p",[n("code",[t._v("&&")])]),t._v(" "),n("p",[n("strong",[t._v("逻辑或")])]),t._v(" "),n("p",[n("code",[t._v("||")])]),t._v(" "),n("p",[n("strong",[t._v("三元运算符")])]),t._v(" "),n("p",[n("code",[t._v("?:")])]),t._v(" "),n("p",[n("strong",[t._v("赋值")])]),t._v(" "),n("p",[n("code",[t._v("= += -= *= /= %= > >= < <= &= ^= |=")])])])}),[],!1,null,null,null);s.default=r.exports}}]);